Pull Requests
"I accept pull requests."  This is a bit of quasi-snark that a project owner on GitHub might toss your way to mean, â€œIf you want something to be different, roll up your sleeves and fix it."  This is a perfectly normal and encouraged workflow on GitHub.

As a GitHub user, I can browse through public projects and choose to "fork" one, creating a copy of it.  I can then set about modifying it to my heart's delight, as is the case with any open source project.  Where things get interesting is that I can then create a "pull request," which presents the original project maintainer with a "hey, what do you think of this code"-o-gram.  The maintainer then reviews the request and accepts it, if he's so inclined.

It's not that this workflow is new, per se.  Open source contributions have been around for as long as, well, open source.  It's that GitHub makes this such a core and easy part of the experience. Collaborator is able to work with GitHub's Pull Request to make code review on large teams even easier. If you are curious, you can see how the integration works here.

Distributed Version Control Systems (DVCS)
GitHub wraps git, which is a DVCS.  In 100 years, if some sort of code historian is telling the tale of version control, you might hear about the great schism between distributed and centralized version control systems.  Centralized version control falls more in line with how people reason about maintenance-oriented tasks.  There is a centralized source of truth and collaborators jump through various hoops to be able to touch (or sometimes even access) it.  Think of a website with read-only PDFs that you can download.  Anyone can take a look, but only certain people with special access can generate a new PDF and change what everyone sees.

Distributed version control systems change the game.  They change the PDFs to modifiable Word documents.  Once the publisher puts them up, anyone can download them, modify them, share them, email them, etc.  There is no "source" of truth.  Each individual copy has its own history and they all share history up to the point of their copying and one-off modification, but there isn't an authoritative "right" one, except by convention.

That is the key distinguishing feature with DVCS.  A "source of truth" is a matter of convention, and each copy (repository) is a stand-alone, complete entity.  This enables an explosion in workflow potential.  Perhaps the most killer feature of this over a traditional, centralized approach is the ability to work without a dependency on network connectivity.  Instead of it being prohibitive to work on spotty WiFi, halfway across the world from the source control machine, you can now be productive and sync up with that repo later, when you're in a better spot.
